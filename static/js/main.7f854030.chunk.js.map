{"version":3,"sources":["board/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Board","setInterval","setState","board","props","tick","this","state","lines","line","cells","cell","push","className","style","backgroundColor","Component","b","drops","nRows","nCols","functick","drop","row","Math","floor","random","col","console","log","window","innerHeight","innerWidth","dCol","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAcaA,G,YAAb,mLAEwB,IAAD,OACnBC,aAAY,WACV,EAAKC,SAAS,CAAEC,MAAO,EAAKC,MAAMC,WACjC,KALP,+BAQY,IAAD,EAEP,KAAG,UAACC,KAAKC,aAAN,aAAC,EAAYJ,OACd,OAAO,yCAGT,IANO,EAMDK,EAAuB,GANtB,cAOYF,KAAKC,MAAMJ,OAPvB,IAOP,2BAAqC,CAAC,IAAD,EAA1BM,EAA0B,QAC7BC,EAAuB,GADM,cAEhBD,GAFgB,IAEnC,2BAAyB,CAAC,IAAfE,EAAc,QACvBD,EAAME,KAAK,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAiB,OAASJ,EAAO,iBAH1C,8BAKnCH,EAAMI,KAAK,yBAAKC,UAAU,QAAQH,KAZ7B,8BAeP,OACE,yBAAKG,UAAU,SACZL,OAzBT,GAA2BQ,c,8MCRjBC,O,IAEAC,MAAwC,G,EAExCC,MAAgB,E,EAChBC,MAAgB,E,EAqBhBC,SAAW,WAAO,IAAD,gBAEJ,EAAKH,OAFD,IAEvB,2BAA+B,CAAC,IAArBI,EAAoB,QAC7BA,EAAKC,KAAOD,EAAKC,IAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiB,EAAKP,MAC7DG,EAAKK,KAAOL,EAAKK,IAAMH,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiB,EAAKN,MAC7DQ,QAAQC,IAAIP,EAAKC,IAAKD,EAAKK,KAC3B,EAAKV,EAAEK,EAAKC,KAAKD,EAAKK,MAAQ,EAAKV,EAAEK,EAAKC,KAAKD,EAAKK,KAAO,IAAM,KAN5C,8BASvB,OAAO,EAAKV,G,mEA3BZX,KAAKa,MAAQK,KAAKC,MAAMK,OAAOC,YAAc,IAC7CzB,KAAKc,MAAQI,KAAKC,MAAMK,OAAOE,WAAa,IAE5C1B,KAAKW,EAAI,GACT,IAAK,IAAIM,EAAM,EAAGA,EAAMjB,KAAKa,MAAOI,IAAO,CACzCjB,KAAKW,EAAEM,GAAO,GACd,IAAK,IAAII,EAAM,EAAGA,EAAMrB,KAAKc,MAAOO,IAClCrB,KAAKW,EAAEM,GAAKI,GAAO,EAKvB,IADA,IAAIM,EAAO,EACFN,EAAM,EAAGA,EAAMrB,KAAKc,MAAOO,GAAO,GACzCrB,KAAKY,MAAMN,KAAK,CAAEW,IAAK,EAAGI,IAAKM,IAC/BA,GAAQ,K,+BAiBV,OACE,kBAAC,EAAD,CAAO5B,KAAMC,KAAKe,e,GA1CKL,aCQTkB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.7f854030.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css';\n\ninterface BoardProps {\n  // width: number;\n  // // height: number;\n  // board: number[][];\n  tick: () => number[][];\n}\n\ninterface BoardState {\n  board: number[][];\n}\n\nexport class Board extends Component<BoardProps, BoardState> {\n\n  componentWillMount() {\n    setInterval(() => {\n      this.setState({ board: this.props.tick() });\n    }, 1);\n  }\n\n  render() {\n\n    if(!this.state?.board){\n      return <div>No board</div>;\n    }\n\n    const lines: JSX.Element[] = [];\n    for (const line of this.state.board) {\n      const cells: JSX.Element[] = [];\n      for (const cell of line) {\n        cells.push(<div className=\"cell\" style={{ backgroundColor: \"hsl(\" + cell + \",75%,75%)\" }}></div>);\n      }\n      lines.push(<div className=\"line\">{cells}</div>);\n    }\n\n    return (\n      <div className=\"board\">\n        {lines}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Board } from './board/Board';\n\nexport default class extends Component {\n\n  private b: any;\n\n  private drops: { row: number, col: number }[] = [];\n\n  private nRows: number = 0;\n  private nCols: number = 0;\n\n  componentWillMount() {\n    this.nRows = Math.floor(window.innerHeight / 30);\n    this.nCols = Math.floor(window.innerWidth / 30);\n\n    this.b = [];\n    for (let row = 0; row < this.nRows; row++) {\n      this.b[row] = [];\n      for (let col = 0; col < this.nCols; col++) {\n        this.b[row][col] = 0;\n      }\n    }\n\n    let dCol = 0;\n    for (let col = 0; col < this.nCols; col += 10) {\n      this.drops.push({ row: 0, col: dCol });\n      dCol += 10;\n    }\n  }\n\n  private functick = () => {\n\n    for (const drop of this.drops) {\n      drop.row = (drop.row + Math.floor(Math.random() * 2)) % this.nRows;\n      drop.col = (drop.col + Math.floor(Math.random() * 2)) % this.nCols;\n      console.log(drop.row, drop.col);\n      this.b[drop.row][drop.col] = (this.b[drop.row][drop.col] + 50) % 360;\n    }\n\n    return this.b;\n  };\n\n  render() {\n    return (\n      <Board tick={this.functick}></Board>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}